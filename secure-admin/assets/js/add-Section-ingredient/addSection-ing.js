var attrs = ['for', 'id', 'name', 'value'];function resetAttributeNames(section) {    var tags = section.find('input, label, textarea'), idx = section.index();    tags.each(function () {        var $this = $(this);        $.each(attrs, function (i, attr) {            var attr_val = $this.attr(attr);            if (attr_val) {                if (attr == 'id')                {                    $this.attr(attr, attr_val + '_' + (idx + 1));                } else                    $this.attr(attr, attr_val.replace(/_\d+$/, '_' + (idx + 1)))            }        })    })}$('.addingre').click(function (e) {    e.preventDefault();    var lastRepeatingGroup = $('.repingredient').last();    var add = 1;    $(lastRepeatingGroup).find("table > tbody > tr").each(function () {        if ($(this).find('.form-control').val() == '') {            add = 0;        }    })    if (add == 1) {        var cloned = lastRepeatingGroup.clone(true)        cloned.insertAfter(lastRepeatingGroup);        //resetAttributeNames(cloned)        var tags = cloned.find('input, label, textarea'), idx = cloned.index();        tags.each(function () {            var $this = $(this);            $.each(attrs, function (i, attr) {                var attr_val = $this.attr(attr);                if (attr_val) {                    $this.attr(attr, attr_val.replace(/_\d+$/, '_' + (idx + 1)));                }                if (attr == 'value') {                    $this.attr(attr, '');                    $this.val('');                }                if (attr == 'id') {                    // console.log($this.attr(attr));                    var value = $this.attr(attr);                    if (typeof value != 'undefined') {                        val = value.split('-');                        idNo = parseInt(val[1]) + 1;                        $this.attr(attr, val[0] + "-" + idNo);                    }                }                tagName = $this.prop("tagName");                if (tagName == "LABEL" || tagName == "label") {                    if ($this + '[class="error"]') {                        $id = $this.attr('id');                        $for = $this.attr('for');                        if ($this.hasClass('error') && $id != $for) {                            $this.remove();                        }                    }                }            })        })    } else {        displayAlert("Please fill up all detail");    }});// Delete a repeating section$('.deleteing').click(function (e) {    e.preventDefault();    var current_fight = $(this).parent('div');    var other_fights = current_fight.siblings('.repingredient');    if (other_fights.length === 0) {//            alert("You should atleast have one Ingredient");        displayAlert("You should atleast have one Ingredient");        return;    }    current_fight.slideUp('slow', function () {        current_fight.remove();        // reset fight indexes        other_fights.each(function () {            //resetAttributeNames($(this));            var tags = $(this).find('input, label, textarea'), idx = $(this).index();            tags.each(function () {                var $this = $(this);                $.each(attrs, function (i, attr) {                    var attr_val = $this.attr(attr);                    if (attr_val) {                        $this.attr(attr, attr_val.replace(/_\d+$/, '_' + (idx + 1)));                    }                })            })        })    })});